/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  ERC1155,
  ERC1155Interface,
} from "../../../contracts/marketplace/ERC1155";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "TransferBatch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "TransferSingle",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "value",
        type: "string",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "URI",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
    ],
    name: "balanceOfBatch",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "batchMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeBatchTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "uri",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611ab4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ce5760003560e01c8063715018a61161008c578063a22cb46511610066578063a22cb465146101af578063e985e9c5146101c2578063f242432a146101fe578063f2fde38b1461021157600080fd5b8063715018a6146101845780638129fc1c1461018c5780638da5cb5b1461019457600080fd5b8062fdd58e146100d357806301ffc9a7146100f95780630e89341c1461011c5780632eb2c2d61461013c5780634e1273f414610151578063688d223214610171575b600080fd5b6100e66100e1366004611073565b610224565b6040519081526020015b60405180910390f35b61010c6101073660046110b3565b6102bf565b60405190151581526020016100f0565b61012f61012a3660046110d7565b61030f565b6040516100f09190611136565b61014f61014a366004611295565b6103a3565b005b61016461015f36600461133f565b6103ef565b6040516100f09190611445565b61014f61017f366004611458565b610519565b61014f610540565b61014f610554565b6033546040516001600160a01b0390911681526020016100f0565b61014f6101bd3660046114a5565b61067d565b61010c6101d03660046114e1565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205460ff1690565b61014f61020c366004611514565b610688565b61014f61021f366004611579565b6106cd565b60006001600160a01b0383166102945760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a2061646472657373207a65726f206973206e6f742061207660448201526930b634b21037bbb732b960b11b60648201526084015b60405180910390fd5b5060008181526097602090815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b14806102f057506001600160e01b031982166303a24d0760e21b145b806102b957506301ffc9a760e01b6001600160e01b03198316146102b9565b60606099805461031e90611594565b80601f016020809104026020016040519081016040528092919081815260200182805461034a90611594565b80156103975780601f1061036c57610100808354040283529160200191610397565b820191906000526020600020905b81548152906001019060200180831161037a57829003601f168201915b50505050509050919050565b6001600160a01b0385163314806103bf57506103bf85336101d0565b6103db5760405162461bcd60e51b815260040161028b906115ce565b6103e88585858585610743565b5050505050565b606081518351146104545760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b606482015260840161028b565b6000835167ffffffffffffffff81111561047057610470611149565b604051908082528060200260200182016040528015610499578160200160208202803683370190505b50905060005b8451811015610511576104e48582815181106104bd576104bd61161d565b60200260200101518583815181106104d7576104d761161d565b6020026020010151610224565b8282815181106104f6576104f661161d565b602090810291909101015261050a81611649565b905061049f565b509392505050565b6105216108e2565b61053c3383836040518060200160405280600081525061093c565b5050565b6105486108e2565b6105526000610ac2565b565b600054610100900460ff16158080156105745750600054600160ff909116105b8061058e5750303b15801561058e575060005460ff166001145b6105f15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161028b565b6000805460ff191660011790558015610614576000805461ff0019166101001790555b61061c610b14565b61063460405180602001604052806000815250610b43565b801561067a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b61053c338383610b73565b6001600160a01b0385163314806106a457506106a485336101d0565b6106c05760405162461bcd60e51b815260040161028b906115ce565b6103e88585858585610c53565b6106d56108e2565b6001600160a01b03811661073a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161028b565b61067a81610ac2565b81518351146107645760405162461bcd60e51b815260040161028b90611662565b6001600160a01b03841661078a5760405162461bcd60e51b815260040161028b906116aa565b3360005b84518110156108745760008582815181106107ab576107ab61161d565b6020026020010151905060008583815181106107c9576107c961161d565b60209081029190910181015160008481526097835260408082206001600160a01b038e16835290935291909120549091508181101561081a5760405162461bcd60e51b815260040161028b906116ef565b60008381526097602090815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610859908490611739565b925050819055505050508061086d90611649565b905061078e565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516108c492919061174c565b60405180910390a46108da818787878787610d81565b505050505050565b6033546001600160a01b031633146105525760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161028b565b6001600160a01b03841661099c5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161028b565b81518351146109bd5760405162461bcd60e51b815260040161028b90611662565b3360005b8451811015610a5a578381815181106109dc576109dc61161d565b6020026020010151609760008784815181106109fa576109fa61161d565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b031681526020019081526020016000206000828254610a429190611739565b90915550819050610a5281611649565b9150506109c1565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610aab92919061174c565b60405180910390a46103e881600087878787610d81565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610b3b5760405162461bcd60e51b815260040161028b9061177a565b610552610ee5565b600054610100900460ff16610b6a5760405162461bcd60e51b815260040161028b9061177a565b61067a81610f15565b816001600160a01b0316836001600160a01b031603610be65760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b606482015260840161028b565b6001600160a01b03838116600081815260986020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416610c795760405162461bcd60e51b815260040161028b906116aa565b336000610c8585610f45565b90506000610c9285610f45565b905060008681526097602090815260408083206001600160a01b038c16845290915290205485811015610cd75760405162461bcd60e51b815260040161028b906116ef565b60008781526097602090815260408083206001600160a01b038d8116855292528083208985039055908a16825281208054889290610d16908490611739565b909155505060408051888152602081018890526001600160a01b03808b16928c821692918816917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610d76848a8a8a8a8a610f90565b505050505050505050565b6001600160a01b0384163b156108da5760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610dc590899089908890889088906004016117c5565b6020604051808303816000875af1925050508015610e00575060408051601f3d908101601f19168201909252610dfd91810190611823565b60015b610eac57610e0c611840565b806308c379a003610e455750610e2061185c565b80610e2b5750610e47565b8060405162461bcd60e51b815260040161028b9190611136565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b606482015260840161028b565b6001600160e01b0319811663bc197c8160e01b14610edc5760405162461bcd60e51b815260040161028b906118e6565b50505050505050565b600054610100900460ff16610f0c5760405162461bcd60e51b815260040161028b9061177a565b61055233610ac2565b600054610100900460ff16610f3c5760405162461bcd60e51b815260040161028b9061177a565b61067a8161104b565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110610f7f57610f7f61161d565b602090810291909101015292915050565b6001600160a01b0384163b156108da5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190610fd4908990899088908890889060040161192e565b6020604051808303816000875af192505050801561100f575060408051601f3d908101601f1916820190925261100c91810190611823565b60015b61101b57610e0c611840565b6001600160e01b0319811663f23a6e6160e01b14610edc5760405162461bcd60e51b815260040161028b906118e6565b609961053c82826119be565b80356001600160a01b038116811461106e57600080fd5b919050565b6000806040838503121561108657600080fd5b61108f83611057565b946020939093013593505050565b6001600160e01b03198116811461067a57600080fd5b6000602082840312156110c557600080fd5b81356110d08161109d565b9392505050565b6000602082840312156110e957600080fd5b5035919050565b6000815180845260005b81811015611116576020818501810151868301820152016110fa565b506000602082860101526020601f19601f83011685010191505092915050565b6020815260006110d060208301846110f0565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561118557611185611149565b6040525050565b600067ffffffffffffffff8211156111a6576111a6611149565b5060051b60200190565b600082601f8301126111c157600080fd5b813560206111ce8261118c565b6040516111db828261115f565b83815260059390931b85018201928281019150868411156111fb57600080fd5b8286015b8481101561121657803583529183019183016111ff565b509695505050505050565b600082601f83011261123257600080fd5b813567ffffffffffffffff81111561124c5761124c611149565b604051611263601f8301601f19166020018261115f565b81815284602083860101111561127857600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a086880312156112ad57600080fd5b6112b686611057565b94506112c460208701611057565b9350604086013567ffffffffffffffff808211156112e157600080fd5b6112ed89838a016111b0565b9450606088013591508082111561130357600080fd5b61130f89838a016111b0565b9350608088013591508082111561132557600080fd5b5061133288828901611221565b9150509295509295909350565b6000806040838503121561135257600080fd5b823567ffffffffffffffff8082111561136a57600080fd5b818501915085601f83011261137e57600080fd5b8135602061138b8261118c565b604051611398828261115f565b83815260059390931b85018201928281019150898411156113b857600080fd5b948201945b838610156113dd576113ce86611057565b825294820194908201906113bd565b965050860135925050808211156113f357600080fd5b50611400858286016111b0565b9150509250929050565b600081518084526020808501945080840160005b8381101561143a5781518752958201959082019060010161141e565b509495945050505050565b6020815260006110d0602083018461140a565b6000806040838503121561146b57600080fd5b823567ffffffffffffffff8082111561148357600080fd5b61148f868387016111b0565b935060208501359150808211156113f357600080fd5b600080604083850312156114b857600080fd5b6114c183611057565b9150602083013580151581146114d657600080fd5b809150509250929050565b600080604083850312156114f457600080fd5b6114fd83611057565b915061150b60208401611057565b90509250929050565b600080600080600060a0868803121561152c57600080fd5b61153586611057565b945061154360208701611057565b93506040860135925060608601359150608086013567ffffffffffffffff81111561156d57600080fd5b61133288828901611221565b60006020828403121561158b57600080fd5b6110d082611057565b600181811c908216806115a857607f821691505b6020821081036115c857634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602f908201527f455243313135353a2063616c6c6572206973206e6f7420746f6b656e206f776e60408201526e195c881b9bdc88185c1c1c9bdd9959608a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161165b5761165b611633565b5060010190565b60208082526028908201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206040820152670dad2e6dac2e8c6d60c31b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b808201808211156102b9576102b9611633565b60408152600061175f604083018561140a565b8281036020840152611771818561140a565b95945050505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160a01b0386811682528516602082015260a0604082018190526000906117f19083018661140a565b8281036060840152611803818661140a565b9050828103608084015261181781856110f0565b98975050505050505050565b60006020828403121561183557600080fd5b81516110d08161109d565b600060033d11156118595760046000803e5060005160e01c5b90565b600060443d101561186a5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561189a57505050505090565b82850191508151818111156118b25750505050505090565b843d87010160208285010111156118cc5750505050505090565b6118db6020828601018761115f565b509095945050505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090611968908301846110f0565b979650505050505050565b601f8211156119b957600081815260208120601f850160051c8101602086101561199a5750805b601f850160051c820191505b818110156108da578281556001016119a6565b505050565b815167ffffffffffffffff8111156119d8576119d8611149565b6119ec816119e68454611594565b84611973565b602080601f831160018114611a215760008415611a095750858301515b600019600386901b1c1916600185901b1785556108da565b600085815260208120601f198616915b82811015611a5057888601518255948401946001909101908401611a31565b5085821015611a6e5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220ce9425fdde7c545f1569c2484300865e07dc027813fa64adc605b6641804575464736f6c63430008100033";

type ERC1155ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC1155ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC1155__factory extends ContractFactory {
  constructor(...args: ERC1155ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC1155> {
    return super.deploy(overrides || {}) as Promise<ERC1155>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC1155 {
    return super.attach(address) as ERC1155;
  }
  override connect(signer: Signer): ERC1155__factory {
    return super.connect(signer) as ERC1155__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC1155Interface {
    return new utils.Interface(_abi) as ERC1155Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC1155 {
    return new Contract(address, _abi, signerOrProvider) as ERC1155;
  }
}
