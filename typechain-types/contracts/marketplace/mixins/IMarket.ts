/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IMarket {
  export type SaleStruct = {
    saleType: PromiseOrValue<BigNumberish>;
    seller: PromiseOrValue<string>;
    contractAddress: PromiseOrValue<string>;
    tokenType: PromiseOrValue<BigNumberish>;
    tokenIds: PromiseOrValue<BigNumberish>[];
    values: PromiseOrValue<BigNumberish>[];
    bidToken: PromiseOrValue<string>;
    startTime: PromiseOrValue<BigNumberish>;
    duration: PromiseOrValue<BigNumberish>;
    extensionDuration: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    bidder: PromiseOrValue<string>;
    bidAmount: PromiseOrValue<BigNumberish>;
  };

  export type SaleStructOutput = [
    number,
    string,
    string,
    number,
    BigNumber[],
    BigNumber[],
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    saleType: number;
    seller: string;
    contractAddress: string;
    tokenType: number;
    tokenIds: BigNumber[];
    values: BigNumber[];
    bidToken: string;
    startTime: BigNumber;
    duration: BigNumber;
    extensionDuration: BigNumber;
    endTime: BigNumber;
    bidder: string;
    bidAmount: BigNumber;
  };
}

export interface IMarketInterface extends utils.Interface {
  functions: {
    "saleIdToSale(uint256)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "saleIdToSale"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "saleIdToSale",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "saleIdToSale",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    saleIdToSale(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IMarket.SaleStructOutput]>;
  };

  saleIdToSale(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IMarket.SaleStructOutput>;

  callStatic: {
    saleIdToSale(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IMarket.SaleStructOutput>;
  };

  filters: {};

  estimateGas: {
    saleIdToSale(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    saleIdToSale(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
