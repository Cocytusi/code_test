/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace MarketCoreUpgradeable {
  export type SaleStruct = {
    saleType: PromiseOrValue<BigNumberish>;
    seller: PromiseOrValue<string>;
    contractAddress: PromiseOrValue<string>;
    tokenType: PromiseOrValue<BigNumberish>;
    tokenIds: PromiseOrValue<BigNumberish>[];
    values: PromiseOrValue<BigNumberish>[];
    bidToken: PromiseOrValue<string>;
    startTime: PromiseOrValue<BigNumberish>;
    duration: PromiseOrValue<BigNumberish>;
    extensionDuration: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    bidder: PromiseOrValue<string>;
    bidAmount: PromiseOrValue<BigNumberish>;
  };

  export type SaleStructOutput = [
    number,
    string,
    string,
    number,
    BigNumber[],
    BigNumber[],
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    saleType: number;
    seller: string;
    contractAddress: string;
    tokenType: number;
    tokenIds: BigNumber[];
    values: BigNumber[];
    bidToken: string;
    startTime: BigNumber;
    duration: BigNumber;
    extensionDuration: BigNumber;
    endTime: BigNumber;
    bidder: string;
    bidAmount: BigNumber;
  };
}

export interface MarketCoreUpgradeableInterface extends utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "AUTHORIZED_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "acceptOffer(uint256)": FunctionFragment;
    "activeSaleIds()": FunctionFragment;
    "activeSales()": FunctionFragment;
    "bidAuction(uint256,uint256)": FunctionFragment;
    "buyFixedPrice(uint256,uint256)": FunctionFragment;
    "cancelOffer(uint256)": FunctionFragment;
    "cancelSale(uint256,string)": FunctionFragment;
    "cancelSaleByAdmin(uint256,string)": FunctionFragment;
    "contractAddressToBidToken(address)": FunctionFragment;
    "finalizeAuction(uint256)": FunctionFragment;
    "getAuctionConfig()": FunctionFragment;
    "getAuctionMinBidAmount(uint256)": FunctionFragment;
    "getContractBidToken(address)": FunctionFragment;
    "getMarketFeeConfig()": FunctionFragment;
    "getMarketRoyaltyConfig()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getTreasury()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "removeContractBidToken(address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "royalties(address,uint256)": FunctionFragment;
    "saleIdToSale(uint256)": FunctionFragment;
    "setContractBidToken(address,address)": FunctionFragment;
    "setMarketFeeConfig(uint256)": FunctionFragment;
    "setMarketRoyaltyConfig(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updateAuctionConfig(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADMIN_ROLE"
      | "AUTHORIZED_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "acceptOffer"
      | "activeSaleIds"
      | "activeSales"
      | "bidAuction"
      | "buyFixedPrice"
      | "cancelOffer"
      | "cancelSale"
      | "cancelSaleByAdmin"
      | "contractAddressToBidToken"
      | "finalizeAuction"
      | "getAuctionConfig"
      | "getAuctionMinBidAmount"
      | "getContractBidToken"
      | "getMarketFeeConfig"
      | "getMarketRoyaltyConfig"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "getTreasury"
      | "grantRole"
      | "hasRole"
      | "removeContractBidToken"
      | "renounceRole"
      | "revokeRole"
      | "royalties"
      | "saleIdToSale"
      | "setContractBidToken"
      | "setMarketFeeConfig"
      | "setMarketRoyaltyConfig"
      | "supportsInterface"
      | "updateAuctionConfig"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AUTHORIZED_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "activeSaleIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "activeSales",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bidAuction",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "buyFixedPrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffer",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSale",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSaleByAdmin",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "contractAddressToBidToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeAuction",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAuctionMinBidAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBidToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketFeeConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketRoyaltyConfig",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeContractBidToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "royalties",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "saleIdToSale",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContractBidToken",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketFeeConfig",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketRoyaltyConfig",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAuctionConfig",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "AUTHORIZED_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeSaleIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activeSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bidAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyFixedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelSaleByAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractAddressToBidToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuctionMinBidAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBidToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketFeeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketRoyaltyConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeContractBidToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "royalties", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saleIdToSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContractBidToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketFeeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketRoyaltyConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAuctionConfig",
    data: BytesLike
  ): Result;

  events: {
    "AuctionConfigUpdated(uint256,uint256)": EventFragment;
    "AuctionFinalized(uint256,address,address,uint256,uint256,uint256)": EventFragment;
    "BidPlaced(uint256,address,uint256,uint256)": EventFragment;
    "ContractBidTokenUpdated(address,address)": EventFragment;
    "FixedPriceFinalized(uint256,address,address,uint256,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MarketFeesUpdated(uint256)": EventFragment;
    "MarketRoyaltyUpdated(uint256)": EventFragment;
    "OfferFinalized(uint256,address,address,uint256,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SaleCanceled(uint256,string)": EventFragment;
    "SaleCreated(uint256,uint8,address,address,uint256[],uint256[],address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionConfigUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BidPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContractBidTokenUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FixedPriceFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketFeesUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketRoyaltyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SaleCreated"): EventFragment;
}

export interface AuctionConfigUpdatedEventObject {
  nexBidPercentInBasisPoint: BigNumber;
  extensionDuration: BigNumber;
}
export type AuctionConfigUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  AuctionConfigUpdatedEventObject
>;

export type AuctionConfigUpdatedEventFilter =
  TypedEventFilter<AuctionConfigUpdatedEvent>;

export interface AuctionFinalizedEventObject {
  saleId: BigNumber;
  seller: string;
  bidder: string;
  royalty: BigNumber;
  marketFee: BigNumber;
  ownerRev: BigNumber;
}
export type AuctionFinalizedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber],
  AuctionFinalizedEventObject
>;

export type AuctionFinalizedEventFilter =
  TypedEventFilter<AuctionFinalizedEvent>;

export interface BidPlacedEventObject {
  saleId: BigNumber;
  bidder: string;
  bidAbount: BigNumber;
  endTime: BigNumber;
}
export type BidPlacedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  BidPlacedEventObject
>;

export type BidPlacedEventFilter = TypedEventFilter<BidPlacedEvent>;

export interface ContractBidTokenUpdatedEventObject {
  contractAddress: string;
  bidToken: string;
}
export type ContractBidTokenUpdatedEvent = TypedEvent<
  [string, string],
  ContractBidTokenUpdatedEventObject
>;

export type ContractBidTokenUpdatedEventFilter =
  TypedEventFilter<ContractBidTokenUpdatedEvent>;

export interface FixedPriceFinalizedEventObject {
  saleId: BigNumber;
  seller: string;
  buyer: string;
  royalty: BigNumber;
  marketFee: BigNumber;
  ownerRev: BigNumber;
}
export type FixedPriceFinalizedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber],
  FixedPriceFinalizedEventObject
>;

export type FixedPriceFinalizedEventFilter =
  TypedEventFilter<FixedPriceFinalizedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MarketFeesUpdatedEventObject {
  marketFeeBps: BigNumber;
}
export type MarketFeesUpdatedEvent = TypedEvent<
  [BigNumber],
  MarketFeesUpdatedEventObject
>;

export type MarketFeesUpdatedEventFilter =
  TypedEventFilter<MarketFeesUpdatedEvent>;

export interface MarketRoyaltyUpdatedEventObject {
  maxRoyaltiyBps: BigNumber;
}
export type MarketRoyaltyUpdatedEvent = TypedEvent<
  [BigNumber],
  MarketRoyaltyUpdatedEventObject
>;

export type MarketRoyaltyUpdatedEventFilter =
  TypedEventFilter<MarketRoyaltyUpdatedEvent>;

export interface OfferFinalizedEventObject {
  saleId: BigNumber;
  seller: string;
  buyer: string;
  royalty: BigNumber;
  marketFee: BigNumber;
  ownerRev: BigNumber;
}
export type OfferFinalizedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber],
  OfferFinalizedEventObject
>;

export type OfferFinalizedEventFilter = TypedEventFilter<OfferFinalizedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SaleCanceledEventObject {
  saleId: BigNumber;
  reason: string;
}
export type SaleCanceledEvent = TypedEvent<
  [BigNumber, string],
  SaleCanceledEventObject
>;

export type SaleCanceledEventFilter = TypedEventFilter<SaleCanceledEvent>;

export interface SaleCreatedEventObject {
  saleId: BigNumber;
  saleType: number;
  seller: string;
  contractAddress: string;
  tokenIds: BigNumber[];
  values: BigNumber[];
  bidToken: string;
  startTime: BigNumber;
  duration: BigNumber;
  extensionDuration: BigNumber;
  endTime: BigNumber;
  minPrice: BigNumber;
}
export type SaleCreatedEvent = TypedEvent<
  [
    BigNumber,
    number,
    string,
    string,
    BigNumber[],
    BigNumber[],
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  SaleCreatedEventObject
>;

export type SaleCreatedEventFilter = TypedEventFilter<SaleCreatedEvent>;

export interface MarketCoreUpgradeable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketCoreUpgradeableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    AUTHORIZED_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    acceptOffer(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    activeSaleIds(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    activeSales(
      overrides?: CallOverrides
    ): Promise<[MarketCoreUpgradeable.SaleStructOutput[]]>;

    bidAuction(
      saleId: PromiseOrValue<BigNumberish>,
      bidAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    buyFixedPrice(
      saleId: PromiseOrValue<BigNumberish>,
      buyAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelOffer(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelSale(
      saleId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelSaleByAdmin(
      saleId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contractAddressToBidToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    finalizeAuction(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAuctionConfig(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getAuctionMinBidAmount(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getContractBidToken(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMarketFeeConfig(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMarketRoyaltyConfig(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTreasury(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeContractBidToken(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    royalties(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { recipient: string; amount: BigNumber }>;

    saleIdToSale(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        number,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ] & {
        saleType: number;
        seller: string;
        contractAddress: string;
        tokenType: number;
        bidToken: string;
        startTime: BigNumber;
        duration: BigNumber;
        extensionDuration: BigNumber;
        endTime: BigNumber;
        bidder: string;
        bidAmount: BigNumber;
      }
    >;

    setContractBidToken(
      contractAddress: PromiseOrValue<string>,
      bidTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMarketFeeConfig(
      marketFeeBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMarketRoyaltyConfig(
      maxRoyaltyBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateAuctionConfig(
      nexBidPercentBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  AUTHORIZED_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  acceptOffer(
    saleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  activeSaleIds(overrides?: CallOverrides): Promise<BigNumber[]>;

  activeSales(
    overrides?: CallOverrides
  ): Promise<MarketCoreUpgradeable.SaleStructOutput[]>;

  bidAuction(
    saleId: PromiseOrValue<BigNumberish>,
    bidAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  buyFixedPrice(
    saleId: PromiseOrValue<BigNumberish>,
    buyAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelOffer(
    saleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelSale(
    saleId: PromiseOrValue<BigNumberish>,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelSaleByAdmin(
    saleId: PromiseOrValue<BigNumberish>,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contractAddressToBidToken(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  finalizeAuction(
    saleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAuctionConfig(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  getAuctionMinBidAmount(
    saleId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getContractBidToken(
    contractAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarketFeeConfig(overrides?: CallOverrides): Promise<BigNumber>;

  getMarketRoyaltyConfig(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTreasury(overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeContractBidToken(
    contractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  royalties(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { recipient: string; amount: BigNumber }>;

  saleIdToSale(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      string,
      string,
      number,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber
    ] & {
      saleType: number;
      seller: string;
      contractAddress: string;
      tokenType: number;
      bidToken: string;
      startTime: BigNumber;
      duration: BigNumber;
      extensionDuration: BigNumber;
      endTime: BigNumber;
      bidder: string;
      bidAmount: BigNumber;
    }
  >;

  setContractBidToken(
    contractAddress: PromiseOrValue<string>,
    bidTokenAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMarketFeeConfig(
    marketFeeBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMarketRoyaltyConfig(
    maxRoyaltyBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updateAuctionConfig(
    nexBidPercentBps: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    AUTHORIZED_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    acceptOffer(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    activeSaleIds(overrides?: CallOverrides): Promise<BigNumber[]>;

    activeSales(
      overrides?: CallOverrides
    ): Promise<MarketCoreUpgradeable.SaleStructOutput[]>;

    bidAuction(
      saleId: PromiseOrValue<BigNumberish>,
      bidAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    buyFixedPrice(
      saleId: PromiseOrValue<BigNumberish>,
      buyAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOffer(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelSale(
      saleId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelSaleByAdmin(
      saleId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    contractAddressToBidToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    finalizeAuction(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAuctionConfig(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getAuctionMinBidAmount(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractBidToken(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarketFeeConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketRoyaltyConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreasury(overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeContractBidToken(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    royalties(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { recipient: string; amount: BigNumber }>;

    saleIdToSale(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        string,
        string,
        number,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ] & {
        saleType: number;
        seller: string;
        contractAddress: string;
        tokenType: number;
        bidToken: string;
        startTime: BigNumber;
        duration: BigNumber;
        extensionDuration: BigNumber;
        endTime: BigNumber;
        bidder: string;
        bidAmount: BigNumber;
      }
    >;

    setContractBidToken(
      contractAddress: PromiseOrValue<string>,
      bidTokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketFeeConfig(
      marketFeeBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketRoyaltyConfig(
      maxRoyaltyBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updateAuctionConfig(
      nexBidPercentBps: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuctionConfigUpdated(uint256,uint256)"(
      nexBidPercentInBasisPoint?: null,
      extensionDuration?: null
    ): AuctionConfigUpdatedEventFilter;
    AuctionConfigUpdated(
      nexBidPercentInBasisPoint?: null,
      extensionDuration?: null
    ): AuctionConfigUpdatedEventFilter;

    "AuctionFinalized(uint256,address,address,uint256,uint256,uint256)"(
      saleId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      bidder?: PromiseOrValue<string> | null,
      royalty?: null,
      marketFee?: null,
      ownerRev?: null
    ): AuctionFinalizedEventFilter;
    AuctionFinalized(
      saleId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      bidder?: PromiseOrValue<string> | null,
      royalty?: null,
      marketFee?: null,
      ownerRev?: null
    ): AuctionFinalizedEventFilter;

    "BidPlaced(uint256,address,uint256,uint256)"(
      saleId?: PromiseOrValue<BigNumberish> | null,
      bidder?: null,
      bidAbount?: null,
      endTime?: null
    ): BidPlacedEventFilter;
    BidPlaced(
      saleId?: PromiseOrValue<BigNumberish> | null,
      bidder?: null,
      bidAbount?: null,
      endTime?: null
    ): BidPlacedEventFilter;

    "ContractBidTokenUpdated(address,address)"(
      contractAddress?: PromiseOrValue<string> | null,
      bidToken?: PromiseOrValue<string> | null
    ): ContractBidTokenUpdatedEventFilter;
    ContractBidTokenUpdated(
      contractAddress?: PromiseOrValue<string> | null,
      bidToken?: PromiseOrValue<string> | null
    ): ContractBidTokenUpdatedEventFilter;

    "FixedPriceFinalized(uint256,address,address,uint256,uint256,uint256)"(
      saleId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null,
      royalty?: null,
      marketFee?: null,
      ownerRev?: null
    ): FixedPriceFinalizedEventFilter;
    FixedPriceFinalized(
      saleId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null,
      royalty?: null,
      marketFee?: null,
      ownerRev?: null
    ): FixedPriceFinalizedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MarketFeesUpdated(uint256)"(
      marketFeeBps?: PromiseOrValue<BigNumberish> | null
    ): MarketFeesUpdatedEventFilter;
    MarketFeesUpdated(
      marketFeeBps?: PromiseOrValue<BigNumberish> | null
    ): MarketFeesUpdatedEventFilter;

    "MarketRoyaltyUpdated(uint256)"(
      maxRoyaltiyBps?: PromiseOrValue<BigNumberish> | null
    ): MarketRoyaltyUpdatedEventFilter;
    MarketRoyaltyUpdated(
      maxRoyaltiyBps?: PromiseOrValue<BigNumberish> | null
    ): MarketRoyaltyUpdatedEventFilter;

    "OfferFinalized(uint256,address,address,uint256,uint256,uint256)"(
      saleId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null,
      royalty?: null,
      marketFee?: null,
      ownerRev?: null
    ): OfferFinalizedEventFilter;
    OfferFinalized(
      saleId?: PromiseOrValue<BigNumberish> | null,
      seller?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null,
      royalty?: null,
      marketFee?: null,
      ownerRev?: null
    ): OfferFinalizedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SaleCanceled(uint256,string)"(
      saleId?: PromiseOrValue<BigNumberish> | null,
      reason?: null
    ): SaleCanceledEventFilter;
    SaleCanceled(
      saleId?: PromiseOrValue<BigNumberish> | null,
      reason?: null
    ): SaleCanceledEventFilter;

    "SaleCreated(uint256,uint8,address,address,uint256[],uint256[],address,uint256,uint256,uint256,uint256,uint256)"(
      saleId?: PromiseOrValue<BigNumberish> | null,
      saleType?: null,
      seller?: PromiseOrValue<string> | null,
      contractAddress?: PromiseOrValue<string> | null,
      tokenIds?: null,
      values?: null,
      bidToken?: null,
      startTime?: null,
      duration?: null,
      extensionDuration?: null,
      endTime?: null,
      minPrice?: null
    ): SaleCreatedEventFilter;
    SaleCreated(
      saleId?: PromiseOrValue<BigNumberish> | null,
      saleType?: null,
      seller?: PromiseOrValue<string> | null,
      contractAddress?: PromiseOrValue<string> | null,
      tokenIds?: null,
      values?: null,
      bidToken?: null,
      startTime?: null,
      duration?: null,
      extensionDuration?: null,
      endTime?: null,
      minPrice?: null
    ): SaleCreatedEventFilter;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    AUTHORIZED_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOffer(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    activeSaleIds(overrides?: CallOverrides): Promise<BigNumber>;

    activeSales(overrides?: CallOverrides): Promise<BigNumber>;

    bidAuction(
      saleId: PromiseOrValue<BigNumberish>,
      bidAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    buyFixedPrice(
      saleId: PromiseOrValue<BigNumberish>,
      buyAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelOffer(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelSale(
      saleId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelSaleByAdmin(
      saleId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contractAddressToBidToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    finalizeAuction(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAuctionConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getAuctionMinBidAmount(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractBidToken(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketFeeConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getMarketRoyaltyConfig(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeContractBidToken(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    royalties(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    saleIdToSale(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setContractBidToken(
      contractAddress: PromiseOrValue<string>,
      bidTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMarketFeeConfig(
      marketFeeBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMarketRoyaltyConfig(
      maxRoyaltyBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateAuctionConfig(
      nexBidPercentBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    AUTHORIZED_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptOffer(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    activeSaleIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeSales(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bidAuction(
      saleId: PromiseOrValue<BigNumberish>,
      bidAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    buyFixedPrice(
      saleId: PromiseOrValue<BigNumberish>,
      buyAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelOffer(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelSale(
      saleId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelSaleByAdmin(
      saleId: PromiseOrValue<BigNumberish>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contractAddressToBidToken(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    finalizeAuction(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAuctionConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAuctionMinBidAmount(
      saleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractBidToken(
      contractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketFeeConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketRoyaltyConfig(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeContractBidToken(
      contractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    royalties(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    saleIdToSale(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setContractBidToken(
      contractAddress: PromiseOrValue<string>,
      bidTokenAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMarketFeeConfig(
      marketFeeBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMarketRoyaltyConfig(
      maxRoyaltyBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateAuctionConfig(
      nexBidPercentBps: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
